/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (!root) return true; // 空树是对称的
        queue<TreeNode*> q;
        q.push(root->left);
        q.push(root->right);
        while (!q.empty()) {
            TreeNode* t1 = q.front(); q.pop();
            TreeNode* t2 = q.front(); q.pop();
            if (!t1 && !t2) continue; // 两个节点都为空，继续
            if (!t1 || !t2) return false; // 只有一个节点为空
            if (t1->val != t2->val) return false; // 值不相等
            q.push(t1->left); // 左子树的左节点
            q.push(t2->right); // 右子树的右节点
            q.push(t1->right); // 左子树的右节点
            q.push(t2->left); // 右子树的左节点
        }
        return true;
    }
};
