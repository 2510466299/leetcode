class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        intervals.emplace_back(newInterval);
        ranges::sort(intervals);
       vector<vector<int>>ans;
       for(auto &p:intervals){
        if(!ans.empty()&&p[0]<=ans.back()[1]){
            ans.back()[1]=max(p[1],ans.back()[1]);
        }else{
            ans.emplace_back(p);
        }
       }
       return ans;
    }
};

vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
    vector<vector<int>> result;
    int i = 0;

    // 添加所有在newInterval之前的区间
    while (i < intervals.size() && intervals[i][1] < newInterval[0]) {
        result.push_back(intervals[i]);
        i++;
    }

    // 合并所有与newInterval重叠的区间
    while (i < intervals.size() && intervals[i][0] <= newInterval[1]) {
        newInterval[0] = min(newInterval[0], intervals[i][0]);
        newInterval[1] = max(newInterval[1], intervals[i][1]);
        i++;
    }
    result.push_back(newInterval);

    // 添加所有在newInterval之后的区间
    while (i < intervals.size()) {
        result.push_back(intervals[i]);
        i++;
    }

    return result;
}
