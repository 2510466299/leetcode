/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // 构造函数中初始化索引映射
    unordered_map<int, int> inorderIndex; // 哈希表存储中序遍历中值与索引的映射

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int n = inorder.size();
        // 建立中序遍历值到索引的映射
        for (int i = 0; i < n; i++) {
            inorderIndex[inorder[i]] = i;
        }
        // 从后序遍历数组的最后一个位置开始构建
        return helper(inorder, postorder, 0, n - 1, 0, n - 1);
    }

    TreeNode* helper(vector<int>& inorder, vector<int>& postorder, 
                     int inStart, int inEnd, int postStart, int postEnd) {
        // 递归终止条件：如果范围无效，返回空指针
        if (inStart > inEnd || postStart > postEnd) return nullptr;

        // 获取当前子树的根节点
        int rootVal = postorder[postEnd];
        TreeNode* root = new TreeNode(rootVal);

        // 在中序遍历中找到根节点的位置
        int inRootIndex = inorderIndex[rootVal];
        int leftSize = inRootIndex - inStart; // 左子树节点数目

        // 递归构建左子树
        root->left = helper(inorder, postorder, 
                            inStart, inRootIndex - 1, 
                            postStart, postStart + leftSize - 1);
        // 递归构建右子树
        root->right = helper(inorder, postorder, 
                             inRootIndex + 1, inEnd, 
                             postStart + leftSize, postEnd - 1);

        return root;
    }
};
