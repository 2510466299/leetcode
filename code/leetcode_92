/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        // 创建 dummy 节点，指向 head，处理从头部开始反转的情况
        ListNode dummy(0);
        dummy.next = head;
        
        // 初始化 p0 指向 dummy，用于找到 left 前一个节点
        ListNode* p0 = &dummy;
        for (int i = 0; i < left - 1; ++i) {
            p0 = p0->next;
        }

        // pre 指向空，cur 指向 left 节点，用于反转链表
        ListNode* pre = nullptr;
        ListNode* cur = p0->next;
        
        // 反转从 left 到 right 的节点
        for (int i = 0; i < right - left + 1; ++i) {
            ListNode* nxt = cur->next; // 临时保存下一个节点
            cur->next = pre;           // 将当前节点的 next 指向前一个节点
            pre = cur;                 // 更新 pre 为当前节点
            cur = nxt;                 // 移动 cur 到下一个节点
        }
        
        // 重新连接反转后的部分
        p0->next->next = cur; // left 节点连接到 right 之后的节点
        p0->next = pre;       // left 前节点连接到反转后的头节点

        return dummy.next;    // 返回新的链表头
    }
};
