class Solution {
public:
    bool isMatch(string s, string p) {
        int m = s.length();
        int n = p.length();
        // 创建二维 dp 数组，dp[i][j] 表示 s 的前 i 个字符与 p 的前 j 个字符是否匹配
        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));

        // 初始化
        dp[0][0] = true;  // 空字符串和空模式匹配

        // 处理空字符串与模式的匹配情况
        for (int j = 2; j <= n; j++) {
            if (p[j - 1] == '*') {
                dp[0][j] = dp[0][j - 2];  // '*' 匹配零个前面的字符
            }
        }

        // 填充 dp 表格
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (p[j - 1] == s[i - 1] || p[j - 1] == '.') {
                    // 当 p[j-1] 是普通字符或 '.' 时
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (p[j - 1] == '*') {
                    // 当 p[j-1] 是 '*' 时
                    dp[i][j] = dp[i][j - 2];  // '*' 匹配零个前面的字符
                    if (p[j - 2] == s[i - 1] || p[j - 2] == '.') {
                        dp[i][j] = dp[i][j] || dp[i - 1][j];  // '*' 匹配一个或多个前面的字符
                    }
                }
            }
        }

        // 返回最终的匹配结果
        return dp[m][n];
    }
};
