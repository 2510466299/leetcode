/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        // 使用哈希表加速查找中序遍历中根节点的位置
        unordered_map<int, int> inorder_map;
        for (int i = 0; i < inorder.size(); ++i) {
            inorder_map[inorder[i]] = i;
        }
        // 调用递归构造函数
        return construct(preorder, 0, preorder.size() - 1, inorder, 0, inorder.size() - 1, inorder_map);
    }

private:
    TreeNode* construct(vector<int>& preorder, int pre_start, int pre_end,
                        vector<int>& inorder, int in_start, int in_end,
                        unordered_map<int, int>& inorder_map) {
        // 递归终止条件：子数组为空
        if (pre_start > pre_end || in_start > in_end) {
            return nullptr;
        }

        // 根节点值是先序遍历数组的第一个元素
        int root_val = preorder[pre_start];
        TreeNode* root = new TreeNode(root_val);

        // 在中序遍历中查找根节点的位置
        int root_index = inorder_map[root_val];

        // 计算左子树的大小
        int left_size = root_index - in_start;

        // 递归构造左子树
        root->left = construct(preorder, pre_start + 1, pre_start + left_size,
                               inorder, in_start, root_index - 1, inorder_map);

        // 递归构造右子树
        root->right = construct(preorder, pre_start + left_size + 1, pre_end,
                                inorder, root_index + 1, in_end, inorder_map);

        return root;
    }
};
