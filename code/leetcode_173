/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
private:
    stack<TreeNode*> stk; // 用于保存节点路径的栈

    // 辅助函数：将节点的左路径入栈
    void pushLeft(TreeNode* node) {
        while (node) {
            stk.push(node); // 当前节点入栈
            node = node->left; // 移动到左子节点
        }
    }

public:
    // 构造函数：初始化迭代器
    BSTIterator(TreeNode* root) {
        pushLeft(root); // 从根节点开始，将左路径入栈
    }
    
    // 检查是否还有下一个节点
    bool hasNext() {
        return !stk.empty();
    }
    
    // 返回下一个节点的值
    int next() {
        TreeNode* node = stk.top(); // 获取栈顶节点
        stk.pop(); // 弹出栈顶节点
        if (node->right) {
            pushLeft(node->right); // 如果有右子树，将右子树的左路径入栈
        }
        return node->val; // 返回当前节点值
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
