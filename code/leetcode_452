class Solution {
public:
    int findMinArrowShots(vector<vector<int>>& points) {
        if (points.empty()) return 0;
    // 按照气球的结束位置进行升序排序
    std::sort(points.begin(), points.end(), [](const std::vector<int>& a, const std::vector<int>& b) {
        return a[1] < b[1];
    });
    
    int arrows = 1; // 至少需要一支箭
    int end = points[0][1]; // 当前箭的射出位置
    for (int i = 1; i < points.size(); ++i) {
        // 如果当前气球的开始位置大于上一支箭的射出位置，则需要新的箭
        if (points[i][0] > end) {
            arrows++;
            end = points[i][1]; // 更新箭的射出位置
        }
    }
    return arrows;
    }
};
